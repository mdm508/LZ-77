list
A list is a linked list composed of listNodes. It will be used by search buffer

Requires list_node

Private Members
@:tail a pointer to listNode that is the tail of the list
@:head a pointer to a listNode that is the head of the list
@:len is number of listNodes in the list

init
@:n is the number of list nodes desired
#: inits a linked list of n listNodes. Each
#: each listNode will be point to null ptr

finalize
#: deletes each node in the list

insert()
@:i is an integer reprsenting an index 
#:will create a new list node with key set to i
#:and insert it at the end of the list. tail
#:points to this new element. and len incremented by one 

remove()
#:removes the listNode pointed to by head 
#:and makes head point to the next of the recently
#:deleted head. Deletes the recently removed node

get_longest_match
@:matchindex
@:L is the match length 
#:search the entire list for the ListNode
#:whose index when scanend has the longest match
#:up to L.
#:returns the index of the ListNode that was found
#:as well as the length of the match


Section: helper functions
match
@:matchindex
@:L
@:buf_index
#:using brute force pattern matching, match as many characters
#:as possible starting at matchindex+2 and buf_index+2 since
#:these are assumed to have already been matched
#:return the length of the match (include the two characters matched initially)
#:thus lowest return value is 2
